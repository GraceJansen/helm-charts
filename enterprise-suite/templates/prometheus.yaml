
---
apiVersion: batch/v1
kind: Job
metadata:
  name: loadrules
spec:
  template:
    spec:
      containers:
      - name: loadrules
        image: lightbend-docker-registry.bintray.io/enterprise-suite/loadrules:latest
      restartPolicy: Never

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-server
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-server

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-server
subjects:
- kind: ServiceAccount
  name: prometheus-server
  namespace: {{.Release.Namespace}}

---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: prometheus
    component: server
  name: prometheus-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      component: server
  template:
    metadata:
      labels:
        app: prometheus
        component: server
    spec:
      serviceAccountName: prometheus-server
      containers:
        - name: es-monitor-api
          image: lightbend-docker-registry.bintray.io/enterprise-suite/es-monitor-api:latest
          args:
            - --rulesPath=/etc/rules/
            - --storagePath=monitor-data/
            - --staticConfig=/etc/static/rules.yml
          volumeMounts:
            - name: rules-volume
              mountPath: /etc/rules
            - name: static-rules-volume
              mountPath: /etc/static
          ports:
            - containerPort: 8180

        - name: prometheus-server-configmap-reload
          image: "jimmidyson/configmap-reload:v0.2.2"
          args:
            - -volume-dir=/etc/config
            - -volume-dir=/etc/rules
            - -webhook-url=http://localhost:9090/-/reload
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true
            - name: rules-volume
              mountPath: /etc/rules
              readOnly: true

        - name: prometheus-server
          image: "prom/prometheus:v2.3.1"
          args:
            - --config.file=/etc/config/prometheus.yml
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /status
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: rules-volume
              mountPath: /etc/rules
              readOnly: true

      terminationGracePeriodSeconds: 300
      volumes:
        - name: rules-volume
          emptyDir: {}
        - name: config-volume
          configMap:
            name: prometheus-server
        - name: static-rules-volume
          configMap:
            name: static-prometheus-rules

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-server
spec:
  ports:
    - port: 80
      targetPort: 9090
  selector:
    app: prometheus
    component: server

---
apiVersion: v1
kind: Service
metadata:
  name: es-monitor-api
spec:
  ports:
    - port: 80
      targetPort: 8180
  selector:
    app: prometheus
    component: server

---
apiVersion: v1
kind: Service
metadata:
  name: expose-prometheus
spec:
  ports:
  - port: 9090
    protocol: TCP
    targetPort: 9090
    nodePort: 30090
  selector:
    app: prometheus
    component: server
  type: NodePort

---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: prometheus
    component: "server"
  name: prometheus-server
data:
  prometheus.yml: |-
    global:
      # dev mode
      scrape_interval: 10s
      evaluation_interval: 10s

    rule_files:
      - /etc/rules/*.yaml

    alerting:
      alertmanagers:
      - kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace,__meta_kubernetes_pod_label_app,__meta_kubernetes_pod_label_component,__meta_kubernetes_pod_container_port_number]
          regex: lightbend;prometheus;alertmanager;[0-9]+
          action: keep

    scrape_configs:
      - job_name: prometheus
        static_configs:
          - targets:
            - localhost:9090

      # This uses separate scrape configs for cluster components (i.e. API server, node)
      # and services to allow each to use different authentication configs.
      #
      # Kubernetes labels will be added as Prometheus labels on metrics via the
      # `labelmap` relabeling action.

      - job_name: 'kubernetes-node-containers'

        # Default to scraping over https. If required, just disable this or change to
        # `http`.
        scheme: https

        # This TLS & bearer token file config is used to connect to the actual scrape
        # endpoints for cluster components. This is separate to discovery auth
        # configuration because discovery & scraping are two separate concerns in
        # Prometheus. The discovery auth config is automatic if Prometheus runs inside
        # the cluster. Otherwise, more config options have to be provided within the
        # <kubernetes_sd_config>.
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          # If your node certificates are self-signed or use a different CA to the
          # master CA, then disable certificate verification below. Note that
          # certificate verification is an integral part of a secure infrastructure
          # so this should only be disabled in a controlled environment. You can
          # disable certificate verification by uncommenting the line below.
          #
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
          - role: node

        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
          - source_labels: [__meta_kubernetes_node_name]
            target_label: node_name
          - source_labels: [__meta_kubernetes_node_address_InternalIP]
            target_label: node_ip

        metric_relabel_configs:
          - source_labels: [pod_name]
            target_label: kubernetes_pod_name
          - regex: pod_name
            action: labeldrop
          # pause containers have all the network stats for a pod
          - source_labels: [container_name, __name__]
            regex: POD;container_(network).*
            target_label: container_name
          # drop all other pause container stats
          - source_labels: [container_name]
            regex: POD
            action: drop
          # drop system containers with no name
          - source_labels: [container_name]
            regex: ^$
            action: drop
          # drop high cardinality debug metrics
          - source_labels: [__name__]
            regex: container_(network_tcp_usage_total|tasks_state|cpu_usage_seconds_total|memory_failures_total|network_udp_usage_total)
            action: drop

      # Scrape config for service endpoints.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
      # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
      # to set this to `https` & most likely set the `tls_config` of the scrape config.
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: If the metrics are exposed on a different port to the
      # service then set this appropriately.
      - job_name: 'kubernetes-service-endpoints'

        kubernetes_sd_configs:
          - role: endpoints

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: (.+)(?::\d+);(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node_name
          - source_labels: [__meta_kubernetes_pod_host_ip]
            action: replace
            target_label: node_ip

        # workload labels:
        metric_relabel_configs:
          - source_labels: [created_by_kind, pod]
            regex: 'ReplicaSet;(.*)-[^-]+-[^-]+'
            target_label: workload
          - source_labels: [created_by_kind, pod]
            regex: 'StatefulSet;(.*)-[^-]+'
            target_label: workload
          - source_labels: [created_by_kind, pod]
            regex: 'DaemonSet;(.*)-[^-]+'
            target_label: workload
          - source_labels: [created_by_kind, pod]
            regex: 'Job;(.*)-[^-]+'
            target_label: workload
          - source_labels: [created_by_kind, pod]
            regex: 'ReplicationController;(.*)-[^-]+'
            target_label: workload
          - source_labels: [created_by_kind, pod]
            regex: '.none.;(.*)'
            target_label: workload

      - job_name: 'prometheus-pushgateway'
        honor_labels: true

        kubernetes_sd_configs:
          - role: service

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: pushgateway

      # Scrape config for probing services via the Blackbox Exporter.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/probe`: Only probe services that have a value of `true`
      - job_name: 'kubernetes-services'

        metrics_path: /probe
        params:
          module: [http_2xx]

        kubernetes_sd_configs:
          - role: service

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: true
          - source_labels: [__address__]
            target_label: __param_target
          - target_label: __address__
            replacement: blackbox
          - source_labels: [__param_target]
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            target_label: kubernetes_name

      # Scrape config for pods
      #
      # The relabeling allows the actual pod scrape endpoint to be configured via the
      # following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
      - job_name: 'kubernetes-pods'

        kubernetes_sd_configs:
          - role: pod

        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: (.+):(?:\d+);(\d+)
            replacement: ${1}:${2}
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node_name
          - source_labels: [__meta_kubernetes_pod_host_ip]
            action: replace
            target_label: node_ip
          - source_labels: [__meta_kubernetes_pod_label_pod_template_hash, __meta_kubernetes_pod_name]
            action: replace
            regex: '[^;]+;(.*)-[^-]+-[^-]+'
            target_label: workload
          - source_labels: [__meta_kubernetes_pod_label_statefulset_kubernetes_io_pod_name]
            action: replace
            regex: (.*)-[0-9]+
            target_label: workload

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: static-prometheus-rules
data:
  rules.yml: |-
    - record: node_cpu_percent
      expr: 100 - avg by (instance) (irate(node_cpu{mode="idle"}[5m]) * 100)

    - record: node_memory_usable_percent
      expr: avg by (instance) (node_memory_MemAvailable / node_memory_MemTotal) * 100

    - record: node_filesystem_free_percent
      expr: avg by (device, instance) ((node_filesystem_free{device=~"/.*"} / node_filesystem_size * 100) and (node_filesystem_size > 0))

    - record: node_network_errors
      expr: sum by(instance) (node_network_transmit_errs + node_network_receive_errs + node_network_receive_drop + node_network_transmit_drop)

    - record: kube_node_pressure
      expr: avg by (condition, node_ip, node_name) (kube_node_status_condition{condition!="Ready", status="true"})

    - record: kube_pod_ready
      expr: avg by (node_ip, node_name, namespace, pod) (kube_pod_status_ready{condition="true"}) * on (pod) group_left(workload) kube_pod_info

    - record: kube_pod_container_restarts_rate
      expr: rate(kube_pod_container_status_restarts_total[1m]) * on (pod) group_left(workload) kube_pod_info

    - record: container_starts_total
      expr: sum by (workload) (1 + kube_pod_container_status_restarts_total * on (pod) group_left(workload) kube_pod_info)

    - record: kube_pod_failed
      expr: kube_pod_status_phase{phase="Failed"} * on (pod) group_left(workload) kube_pod_info

    - record: kube_pod_not_running
      expr: kube_pod_status_phase{phase=~"Pending|Unknown"} * on (pod) group_left(workload) kube_pod_info

    - record: kube_workload_generation_lag
      expr: avg by (workload, namespace) (label_replace(kube_deployment_metadata_generation - kube_deployment_status_observed_generation, "workload", "$1", "deployment", "(.+)"))

    - record: kube_workload_generation_lag
      expr: avg by (workload, namespace) (label_replace(kube_daemonset_status_desired_number_scheduled - kube_daemonset_status_number_ready, "workload", "$1", "daemonset", "(.+)"))

    - record: prometheus_notification_queue_percent
      expr: 100 * prometheus_notifications_queue_length / prometheus_notifications_queue_capacity

    - record: prometheus_target_sync_percent
      expr: 100 * prometheus_target_sync_length_seconds{quantile="0.99"} / on (job,instance) group_left(interval) prometheus_target_interval_length_seconds{quantile="0.01"}

    - record: prometheus_notifications_dropped_rate
      expr: rate(prometheus_notifications_dropped_total[10m])

    - record: prometheus_rule_evaluation_failures_rate
      expr: rate(prometheus_rule_evaluation_failures_total[10m])

    - record: prometheus_target_scrapes_exceeded_sample_limit_rate
      expr: rate(prometheus_target_scrapes_exceeded_sample_limit_total[10m])

    - record: prometheus_tsdb_reloads_failures_rate
      expr: rate(prometheus_tsdb_reloads_failures_total[10m])

    - record: akka_processing_time_seconds
      expr: akka_actor_processing_time_ns{quantile="0.5"} / 1000000000

    - record: zk_open_file_ratio
      expr: (zk_open_file_descriptor_count/zk_max_file_descriptor_count) * 100

    - record: redis_keyspace_miss_ratio
      expr: (redis_keyspace_misses_total/redis_keyspace_hits_total) * 100

    - record: kafka_incoming_messages_rate
      expr: sum without (instance) (rate(kafka_server_brokertopicmetrics_messagesin_total[5m]))

    - record: kafka_active_controllers
      expr: sum by (workload) (kafka_controller_kafkacontroller_activecontrollercount)

    - record: memcached_miss_ratio
      expr: (sum without(command, status) (memcached_commands_total{status="miss"})/sum without(command, status) (memcached_commands_total)) * 100

    - record: memcached_evictions_rate
      expr: rate(memcached_items_evicted_total[5m])
